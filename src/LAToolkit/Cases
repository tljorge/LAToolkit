** Cases for parser **

Note: parser works line by line and makes decisions based on the data in the line
and the state of the program

1) Reads a line to declare variable
    Ex: 'A='
    Current state: Free state, normal spacing
    Next state: matrix declaration, wide spacing for input

    Notes: After '=' key is read, program should shift states and move to the
    next line.

2) Reads a line of doubles/integers
    Ex: '5 8 7'
    Current state: matrix declaration
    Next state: matrix declaration

    Notes: Program will continue in the matrix declaration state
    
                    **Not implemented **
3) Reads a line of doubles/integers with matrix escape key 
    Ex: '5 8 7 /'
    Current state: matrix declaration
    Next state: matrix confirmation OR matrix declaration

    Notes: The matrix is deemed complete by the user and the program will attempt
    to create the matrix object with the data provided. This should also check for any
    errors in the creation process and notify the user.

4) Reads matrix escape character
    Ex: '/'
    Current state: matrix declaration
    Next State: matrix confirmation

    Notes: Same as notes from case 3.

SIDE NOTE: Assuming matrix creation was completed with no errors the program state
should switch from matrix confirmation state to free state, this allows the program
to either perform various matrix functions or continue cases 1-4.

5) Reads a function command
    Ex: 'A*B' or 'funct(A*B)
    Note: Undecided about allowable syntax for function commands due to difficulty
    parsing without good regular expressions.

    Current state: free state
    Next state: execute function OR free state
    
    Notes: function execution will succeed or fail based on various rules in the
    program and the rules for the operation. If failed user will be notified and the
    program will continue in the free state allowing user to correct any errors
    


